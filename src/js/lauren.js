// Generated by CoffeeScript 1.6.3
(function() {
  var ArrayGeneratorType, ArrayRandomGeneratorType, ArrayRoundRobinGeneratorType, BooleanGeneratorType, ComboGeneratorType, FloatGeneratorType, Generator, GeneratorType, IntegerGeneratorType, JSONSelect, NullGeneratorType, PropertyAccessorGeneratorType, RandExp, RandomStringGeneratorType, RegexStringGeneratorType, StaticStringGeneratorType, VariableFetchGeneratorType, exported, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RandExp = require('randexp');

  JSONSelect = require('JSONSelect');

  GeneratorType = (function() {
    function GeneratorType() {}

    return GeneratorType;

  })();

  Generator = (function(_super) {
    __extends(Generator, _super);

    function Generator(number_of_items) {
      this.number_of_items = number_of_items;
      this.members = [];
      this.variables = [];
    }

    Generator.prototype.addHash = function(key, type) {
      return this.members.push({
        key: key,
        type: type
      });
    };

    Generator.prototype.addRandomString = function(key, length) {
      return this.addHash(key, new RandomStringGeneratorType(length));
    };

    Generator.prototype.addRegexString = function(key, regex) {
      return this.addHash(key, new RegexStringGeneratorType(regex));
    };

    Generator.prototype.addInteger = function(key, min, max) {
      return this.addHash(key, new IntegerGeneratorType(min, max));
    };

    Generator.prototype.addBoolean = function(key) {
      return this.addHash(key, new BooleanGeneratorType());
    };

    Generator.prototype.addStaticString = function(key, value) {
      return this.addHash(key, new StaticStringGeneratorType(value));
    };

    Generator.prototype.addCombo = function(key, types) {
      return this.addHash(key, new ComboGeneratorType(types));
    };

    Generator.prototype.addGenerator = function(key, generator) {
      return this.addHash(key, generator);
    };

    Generator.prototype.addReference = function(key, referent) {
      return this.addHash(key, new PropertyAccessorGeneratorType(referent));
    };

    Generator.prototype.addFromArrayRoundRobin = function(key, array) {
      return this.addHash(key, new ArrayRoundRobinGeneratorType(array));
    };

    Generator.prototype.addFromArrayRandom = function(key, array) {
      return this.addHash(key, new ArrayRandomGeneratorType(array));
    };

    Generator.prototype.addArray = function(key, array, frequencies) {
      return this.addHash(key, new ArrayGeneratorType(array, frequencies));
    };

    Generator.prototype.addFromVariable = function(key, variable_name) {
      return this.addHash(key, new VariableFetchGeneratorType(variable_name));
    };

    Generator.prototype.addInt = function(key, min, max) {
      return this.addHash(key, new IntegerGeneratorType(min, max));
    };

    Generator.prototype.addNull = function(key) {
      return this.addHash(key, new NullGeneratorType());
    };

    Generator.prototype.addVariable = function(varname, type) {
      return this.variables.push({
        name: varname,
        type: type
      });
    };

    Generator.prototype.output = function(n) {
      this.number_of_items = n;
      return this.generate(null, null, []);
    };

    Generator.prototype.generate = function(i, current_object, globals) {
      var member, members_to_generate, object, output, variable, _i, _j, _k, _len, _len1, _ref, _ref1;
      output = new Array();
      members_to_generate = this.members;
      _ref = this.variables;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        variable = _ref[_i];
        globals[variable.name] = variable.type.generate();
      }
      for (i = _j = 0, _ref1 = this.number_of_items; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        object = {};
        for (_k = 0, _len1 = members_to_generate.length; _k < _len1; _k++) {
          member = members_to_generate[_k];
          object[member.key] = member.type.generate(i, object, globals);
        }
        output.push(object);
      }
      return output;
    };

    return Generator;

  })(GeneratorType);

  RandomStringGeneratorType = (function(_super) {
    __extends(RandomStringGeneratorType, _super);

    function RandomStringGeneratorType(length) {
      this.length = length;
      this.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890-=!@#$%^&*&()_+,./<>?|\\~`";
    }

    RandomStringGeneratorType.prototype.generate = function() {
      var i, output, _i, _ref;
      output = "";
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        output += this.chars[Math.floor(Math.random() * this.chars.length)];
      }
      return output;
    };

    return RandomStringGeneratorType;

  })(GeneratorType);

  RegexStringGeneratorType = (function(_super) {
    __extends(RegexStringGeneratorType, _super);

    function RegexStringGeneratorType(regex) {
      this.regex = regex;
    }

    RegexStringGeneratorType.prototype.generate = function() {
      return new RandExp(this.regex).gen();
    };

    return RegexStringGeneratorType;

  })(GeneratorType);

  IntegerGeneratorType = (function(_super) {
    __extends(IntegerGeneratorType, _super);

    function IntegerGeneratorType(min, max) {
      this.min = min;
      this.max = max;
    }

    IntegerGeneratorType.prototype.generate = function() {
      return Math.floor(Math.random() * (this.max - this.min)) + this.min;
    };

    return IntegerGeneratorType;

  })(GeneratorType);

  FloatGeneratorType = (function(_super) {
    __extends(FloatGeneratorType, _super);

    function FloatGeneratorType(min, max) {
      this.min = min;
      this.max = max;
    }

    FloatGeneratorType.prototype.generate = function() {
      return Math.random() * (this.max - this.min) + this.min;
    };

    return FloatGeneratorType;

  })(GeneratorType);

  BooleanGeneratorType = (function(_super) {
    __extends(BooleanGeneratorType, _super);

    function BooleanGeneratorType() {
      _ref = BooleanGeneratorType.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BooleanGeneratorType.prototype.generate = function() {
      return Math.floor((Math.random() * 2) + 1) % 2 === 0;
    };

    return BooleanGeneratorType;

  })(GeneratorType);

  StaticStringGeneratorType = (function(_super) {
    __extends(StaticStringGeneratorType, _super);

    function StaticStringGeneratorType(value) {
      this.value = value;
    }

    StaticStringGeneratorType.prototype.generate = function() {
      return this.value;
    };

    return StaticStringGeneratorType;

  })(GeneratorType);

  PropertyAccessorGeneratorType = (function(_super) {
    __extends(PropertyAccessorGeneratorType, _super);

    function PropertyAccessorGeneratorType(property_name) {
      this.property_name = property_name;
    }

    PropertyAccessorGeneratorType.prototype.generate = function(i, for_object, globals) {
      return JSONSelect.match(this.property_name, for_object)[0];
    };

    return PropertyAccessorGeneratorType;

  })(GeneratorType);

  ComboGeneratorType = (function(_super) {
    __extends(ComboGeneratorType, _super);

    function ComboGeneratorType(types) {
      this.types = types;
    }

    ComboGeneratorType.prototype.generate = function(i, for_object, globals) {
      var output, type, _i, _len, _ref1;
      output = "";
      _ref1 = this.types;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        type = _ref1[_i];
        output += type.generate(i, for_object, globals);
      }
      return output;
    };

    return ComboGeneratorType;

  })(GeneratorType);

  ArrayRoundRobinGeneratorType = (function(_super) {
    __extends(ArrayRoundRobinGeneratorType, _super);

    function ArrayRoundRobinGeneratorType(values) {
      this.values = values;
    }

    ArrayRoundRobinGeneratorType.prototype.generate = function(i, for_object, globals) {
      return this.values[i % this.values.length];
    };

    return ArrayRoundRobinGeneratorType;

  })(GeneratorType);

  ArrayGeneratorType = (function(_super) {
    __extends(ArrayGeneratorType, _super);

    function ArrayGeneratorType(values, frequencies) {
      this.values = values;
      this.frequencies = frequencies;
    }

    ArrayGeneratorType.prototype.generate = function(i, for_object, globals) {
      var freq, output, value, _i, _len, _ref1;
      output = [];
      _ref1 = this.values;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        value = _ref1[i];
        freq = this.frequencies[i];
        if (freq === void 0) {
          freq = 1;
        }
        if (!(Math.random() >= freq)) {
          output.push(value);
        }
      }
      return output;
    };

    return ArrayGeneratorType;

  })(GeneratorType);

  ArrayRandomGeneratorType = (function(_super) {
    __extends(ArrayRandomGeneratorType, _super);

    function ArrayRandomGeneratorType(values) {
      this.values = values;
    }

    ArrayRandomGeneratorType.prototype.generate = function(i, for_object, globals) {
      return this.values[Math.floor(Math.random() * this.values.length)];
    };

    return ArrayRandomGeneratorType;

  })(GeneratorType);

  VariableFetchGeneratorType = (function(_super) {
    __extends(VariableFetchGeneratorType, _super);

    function VariableFetchGeneratorType(name) {
      this.name = name;
    }

    VariableFetchGeneratorType.prototype.generate = function(i, for_object, globals) {
      return globals[this.name];
    };

    return VariableFetchGeneratorType;

  })(GeneratorType);

  NullGeneratorType = (function(_super) {
    __extends(NullGeneratorType, _super);

    function NullGeneratorType() {
      _ref1 = NullGeneratorType.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    NullGeneratorType.prototype.generate = function(i, for_object, globals) {
      return null;
    };

    return NullGeneratorType;

  })(GeneratorType);

  exported = typeof exports !== "undefined" && exports !== null ? exports : this;

  exported.buildGenerator = function(number_of_items) {
    return new Generator(number_of_items);
  };

  exported.regexGeneratorType = function(regex) {
    return new RegexStringGeneratorType(regex);
  };

  exported.accessorType = function(property_name) {
    return new PropertyAccessorGeneratorType(property_name);
  };

  exported.fromVariableType = function(variable_name) {
    return new VariableFetchGeneratorType(variable_name);
  };

}).call(this);
